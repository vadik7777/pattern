Структурные паттерны
	Адаптер (Adapter)
	Декоратор (Decorator) или Оболочка (Wrapper)
	Заместитель (Proxy) или Суррогат (Surrogate)
	Компановщик (Composite)
	Мост (Bridge), Handle (Описатель) или Тело (Body)
	Приспособленец (Flyweight)
	Фасад (Facade)
	
--> Адаптер
Проблема
	Необходимо обеспечить взаимодействие несовместимых интерфейсов или как создать единый 
	устойчивый интерфейс для некольких компонентов с разными интерфейсами
Решение
	Конвертировать исходный интерфейс компонента к другому виду с помощью промежуточного
	объекта - адаптера, то есть, добавить специальный объект с общим интерфейсом в рамках
	данного приложения и перенаправить связи от внешних объектов к этому объекту - адаптеру.
	
--> Proxy (Заместитель) или Surrogate (Суррогат)
Проблема
	Необходимо управлять доступом к объекту, так чтобы создавать громоздкие 
	объекты "по требованию".
Решение
	Создание ресурсоемких объектов по требованию, навешивания кеширования, логирования и т.п.
	
--> Decorator (Декоратор) или Wrapper (оболочка) - Происходит двойной вызов методов интерфейса Компонента
	используется цепочка вызовов -  new Decorator1(new Decrator2(new Component)).function
Проблема
	Возлжоить дополнительные обязанности (прозрачные для клиентов) на отдельный объект,
	а не класс целиком.
Решение
	Применение нескольких "Декораторов" к одному "Компоненту" позволяет произвольным образом
	сочетать обязанности, например, одно свойство можно добавить дважды.

--> Мост (Bridge), Handle (Описатель) или Тело (Body)
Проблема
	Требуется отделить абстракцию от реализации так, чтобы и то и другое можно
	было изменять независимо. При использовании наследования реализация жестко
	привязывается к абстракции, что затрудняет модификацию.
Решение
	Поместить абстракцию и реализацию в отдельные иерархии классов.
	
--> Компановщик (Composite)
Проблема
	Объеденить объекты в древовидную структуру. Позволить клиентам обращаться к отдельным
	объектам и к группам объектов одинаково.
Решение
	Использовать абстракцию для всех объектов, а в одном или нескольких реализациях использовать
		объект типа коллекции свозможностью добавления или удаления элементов абстракции.

--> Фасад (Facade)
Проблема
	Как обеспечить унифицированный интерфейс с набором разроненных реализаций или интерфейсов,
	например с подсистемой,если нежелательно сильное связывание с этой подсистемой или реализация
	подсистемы может измениться?
Решение
	Определить одну точку взаимодейтвия с подсистемой - фасадный объект, обеспечивающий общий интерфейс
	с подсистемой, и возложить на него обязанности по взаимодействию с ее компонентами. Фасад - это
	внешний объект, обеспечивающий единственную точку входа для служб подсистемы. Реализация других
	компонентов системы закрыта и не видна внешним компонентам. Фасадный объект обеспечивает реализацию
	GRASP паттерна "Устойчивый к изменениям" (Protected Variations) с точки зрения защиты от
	изменений в реализации в подсистемы.