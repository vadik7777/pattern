-->Объект должен иметь состояние и поведение, где параметры - свойства, а поведение - методы.

-->Инкапсуляция - кратко: объекты системы не должны менять состояние других объектов напрямую.
	Это принцип, согласно которому любой класс и в более широком смысле - любая
	часть системы, должны рассматриваться как черный ящик - пользователь класса
	или подсистемы должен видеть и использовать только интерфейс (т.е. список деклалируемых
	свойств и методов) и не вникать во внутреннюю реализацию.
	Позволяет (теоретически) минимизировать число связей между класами и подсистемами и,
	соответвественно, упростить независимую реализацию классов и подсистем.
	
-->Наследование
	Возможность порождать один класс от другого с сохранением всех свойств и методов класса
	предка (иногда его называют суперклассом) добавляя, при необходимости, новые свойства и
	методы.
	Призвано отобразить такое свойство реального мира, как иерархичность.
	
--> Полиформизм
	Классы-потомки могут изменять реализацию метода класса-предка,
	сохраняя его сигнатуру(таким образом, сохраняя неизменным интерфейс класса-предка).
	Позволяет обрабатывать объекты классов-потомков как однотипные объекты,
	не смотря на то, что реализация методов у них может различаться.
	
	Интерфейс является принадлежностью не того класса который его реализует,
	а принадлженостью того класса который его использует.

--> Information Expert
Проблема
	В системе должна аккумулироваться, рассчитываться и т.п. необходимая информация.
Решение
	Назначить обязанность аккумуляции информации, расчета и т.п. некому классу(информационнному эксперту),
	обладающему необходимой информацией.
Рекомендации
	Информационным экспертом может быть не один класс, а несколько.
--> Creator
Проблема
	Кто должен отвечать за создание экземпляров класса?
Решение
	Назначить классу В обязанность создавать объекты другого класса А
Рекомендации 
	Логично использовать паттерн если класс B содержит, агрегирует, активно использует и т.п. объекты класса A
	
--> Controller
	Превращает многотопоточный вход в однопоточный
Проблема
	"Кто" должен отвечать за обработку входных системных событий?
Решение
	Обязанности по обработке системных сообщений делегируются специальному классу.
	Контроллер - это объект, который отвечает за обработку системных событий и не относиться
	к интерфейсу пользователя. Контроллер определяет методы для выполнения системных операций.
Рекомендации
	Для различных прецедентов логично использовать разные контроллеры(контроллеры прецендентов) -
	контроллеры не должны быть перегружены. Внешний контроллер представляет всю систему целиком, его
	можно использовать, если он будет не слишком перегружен(то есть, если существует лишь несколько
	системных событий)

--> Low Coupling (Низкая связность) Минимизируем количество связей
Проблема
	Обеспечить низкую связность при создании экземпляра класса и связывание его с другими классом.
Решение
	Распределить обязанности между объектами так, чтобы степень связности оставалась низкой.
Рекомендации

--> High Cohesion (Высокое зацепление) - Один класс, Инкапсуляция, Максимизируем связность внутри класса, сцепленность
Проблема
	Необходимо обеспечить выполнение объектами разнородных функций.
Решение
	Обеспечить распределение обязанностей с высоким зацеплением.
Рекомендации

--> Polymorphism (Данной паттерн выводиться из Indirection)
Проблема
	Как обрабатывать альтернативные варианты на основе типа? 
	Как заменять подключаемые компоненты системы?
Решение
	Обязанности распределяются для различных вариантов поведения с помощью полиморфных операций
	для этого класса. Каждая внешняя система имеет свой интерфейс.
Рекомендации
Грань использования полиформизма наступает при использовании другого класса см. изображение.

--> Pure Fabrication (Искусственный)
Проблема
	Какой класс должен обеспечивать реализацию паттернов "Высокое зацепление", и "Низкая связность"?
Решение
	Присвоить группу обязанностей с высокой степенью зацепления классу, который не представляет
	конкретного понятия из предметной области(синтезировать искусственную сущность для
	обеспечения высокого зацепления и слабого связывания).
Рекомендации

--> Indirection (Перенаправление, удаление прямого связывания) Посредник
Проблема
	Как перераспределить обязанности объектов, чтобы обеспечить отсутствие прямого связывания?
Решение
	Присвоить обязанности по обеспечению связи между службами или компонентами промежуточному объекту.
Рекомендации

--> Protected Variations (Устойчивый к изменениям) Множество вложенных IF-ов, одна из ошибок этого шаблона
Проблема
	Как спроектировать систему так, чтобы изменения одних ее элементов не влияло на другие?
Решение
	Идентифицировать точки возможных изменений или неустойчивости и распределить
	обязанности таким образом, чтобы обеспечить устойчивую работу системы.
Рекомендации